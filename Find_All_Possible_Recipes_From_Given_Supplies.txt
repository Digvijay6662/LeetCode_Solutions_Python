2115. Find All Possible Recipes from Given Supplies
Solved
Medium
Topics
Companies
Hint
You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. A recipe can also be an ingredient for other recipes, i.e., ingredients[i] may contain a string that is in recipes.

You are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.

Return a list of all the recipes that you can create. You may return the answer in any order.

Note that two recipes may contain each other in their ingredients.

 

Example 1:

Input: recipes = ["bread"], ingredients = [["yeast","flour"]], supplies = ["yeast","flour","corn"]
Output: ["bread"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
Example 2:

Input: recipes = ["bread","sandwich"], ingredients = [["yeast","flour"],["bread","meat"]], supplies = ["yeast","flour","meat"]
Output: ["bread","sandwich"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
We can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread".
Example 3:

Input: recipes = ["bread","sandwich","burger"], ingredients = [["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]], supplies = ["yeast","flour","meat"]
Output: ["bread","sandwich","burger"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
We can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread".
We can create "burger" since we have the ingredient "meat" and can create the ingredients "bread" and "sandwich".
 

Constraints:

n == recipes.length == ingredients.length
1 <= n <= 100
1 <= ingredients[i].length, supplies.length <= 100
1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10
recipes[i], ingredients[i][j], and supplies[k] consist only of lowercase English letters.
All the values of recipes and supplies combined are unique.
Each ingredients[i] does not contain any duplicate values.


Solution 1:

class Solution:
    def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:
        n = len(recipes)
        supplies = set(supplies)
        recipe_idx = defaultdict(int)

        for i in range(n):
            recipe_idx[recipes[i]] = i

        def dfs(i, visited):
            if i in visited:
                return False
            visited.add(i)
            for j in range(len(ingredients[i])):
                if ingredients[i][j] not in supplies:
                    if ingredients[i][j] not in recipe_idx or not dfs(recipe_idx[ingredients[i][j]], visited):
                        return False
            visited.remove(i)
            supplies.add(recipes[i])
            return True

        result = []
        for i in range(n):
            if dfs(i, set()):
                result.append(recipes[i])
        
        return result


Solution 2:

class Solution:
    def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:
        n = len(recipes)
        supplies = set(supplies)
        recipe_idx = {recipe: i for i, recipe in enumerate(recipes)}
        state = [0] * n  # 0: unvisited, 1: visiting, 2: visited
        can_make = [False] * n

        def dfs(i):
            if state[i] == 1:  # Cycle detected
                return False
            if state[i] == 2:  # Already evaluated
                return can_make[i]
            state[i] = 1  # Mark as visiting
            for ingredient in ingredients[i]:
                if ingredient in supplies:
                    continue
                if ingredient not in recipe_idx or not dfs(recipe_idx[ingredient]):
                    state[i] = 2
                    return False
            state[i] = 2  # Mark as visited
            can_make[i] = True
            return True

        result = []
        for i in range(n):
            if dfs(i):
                result.append(recipes[i])
        return result