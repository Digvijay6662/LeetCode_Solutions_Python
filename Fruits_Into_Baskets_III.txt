3479. Fruits Into Baskets III
Solved
Medium
Topics
premium lock icon
Companies
Hint
You are given two arrays of integers, fruits and baskets, each of length n, where fruits[i] represents the quantity of the ith type of fruit, and baskets[j] represents the capacity of the jth basket.

From left to right, place the fruits according to these rules:

Each fruit type must be placed in the leftmost available basket with a capacity greater than or equal to the quantity of that fruit type.
Each basket can hold only one type of fruit.
If a fruit type cannot be placed in any basket, it remains unplaced.
Return the number of fruit types that remain unplaced after all possible allocations are made.

 

Example 1:

Input: fruits = [4,2,5], baskets = [3,5,4]

Output: 1

Explanation:

fruits[0] = 4 is placed in baskets[1] = 5.
fruits[1] = 2 is placed in baskets[0] = 3.
fruits[2] = 5 cannot be placed in baskets[2] = 4.
Since one fruit type remains unplaced, we return 1.

Example 2:

Input: fruits = [3,6,1], baskets = [6,4,7]

Output: 0

Explanation:

fruits[0] = 3 is placed in baskets[0] = 6.
fruits[1] = 6 cannot be placed in baskets[1] = 4 (insufficient capacity) but can be placed in the next available basket, baskets[2] = 7.
fruits[2] = 1 is placed in baskets[1] = 4.
Since all fruits are successfully placed, we return 0.

 

Constraints:

n == fruits.length == baskets.length
1 <= n <= 105
1 <= fruits[i], baskets[i] <= 109


Solution 1:

class SegmentTree:
    def __init__(self, n: int):
        # initialize the segment tree array with 4*n slots (safe upper bound)
        self.tree = [0] * (4 * n)

    def buildTree(self, l: int, r: int, i: int, nums: List[int]):
        # leaf node: corresponds to a single basket
        if l == r:
            self.tree[i] = nums[l]
            return

        m = (l + r) // 2
        # build left subtree on [l..m] at index 2*i+1
        self.buildTree(l, m, 2*i + 1, nums)
        # build right subtree on [m+1..r] at index 2*i+2
        self.buildTree(m + 1, r, 2*i + 2, nums)
        # internal node holds the max capacity of its two children
        self.tree[i] = max(self.tree[2*i + 1], self.tree[2*i + 2])

    def query(self, fruit: int, i: int, l: int, r: int) -> bool:
        # if even the largest capacity in this segment is too small, fail
        if self.tree[i] < fruit:
            return False

        # if we've narrowed down to one basket, place fruit here
        if l == r:
            # mark this basket as used by zeroing its capacity
            self.tree[i] = 0
            return True

        m = (l + r) // 2
        placed = False

        # check left child first: ensures "leftmost" placement
        if self.tree[2*i + 1] >= fruit:
            placed = self.query(fruit, 2*i + 1, l, m)
        else:
            # otherwise, go right
            placed = self.query(fruit, 2*i + 2, m + 1, r)

        # after recursion, update this node's max from its children
        self.tree[i] = max(self.tree[2*i + 1], self.tree[2*i + 2])
        return placed

class Solution:
    def numOfUnplacedFruits(self, fruits: List[int], baskets: List[int]) -> int:
        n = len(fruits)
        # build a segment tree over basket capacities
        tree = SegmentTree(n)
        tree.buildTree(0, n - 1, 0, baskets)

        unplaced = 0
        # try to place each fruit in order
        for quantity in fruits:
            # if query returns False, no basket could hold this fruit
            if not tree.query(quantity, 0, 0, n - 1):
                unplaced += 1

        return unplaced