2116. Check if a Parentheses String Can Be Valid
Solved
Medium
Topics
Companies
Hint
A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:

It is ().
It can be written as AB (A concatenated with B), where A and B are valid parentheses strings.
It can be written as (A), where A is a valid parentheses string.
You are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked,

If locked[i] is '1', you cannot change s[i].
But if locked[i] is '0', you can change s[i] to either '(' or ')'.
Return true if you can make s a valid parentheses string. Otherwise, return false.

 

Example 1:


Input: s = "))()))", locked = "010100"
Output: true
Explanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].
We change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid.
Example 2:

Input: s = "()()", locked = "0000"
Output: true
Explanation: We do not need to make any changes because s is already valid.
Example 3:

Input: s = ")", locked = "0"
Output: false
Explanation: locked permits us to change s[0]. 
Changing s[0] to either '(' or ')' will not make s valid.
 

Constraints:

n == s.length == locked.length
1 <= n <= 105
s[i] is either '(' or ')'.
locked[i] is either '0' or '1'.


Solution 1:

class Solution:
    def canBeValid(self, s: str, locked: str) -> bool:
        n = len(s)
        if n % 2 == 1:
            return False

        free_brackets = []
        open_brackets = []

        for i in range(n):
            if locked[i] == '0':
                free_brackets.append(i)
            elif s[i] == '(':
                open_brackets.append(i)
            elif s[i] == ')':
                if open_brackets:
                    open_brackets.pop()
                elif free_brackets:
                    free_brackets.pop()
                else:
                    return False
        
        while open_brackets and free_brackets and open_brackets[-1] < free_brackets[-1]:
            open_brackets.pop()
            free_brackets.pop()

        if not open_brackets and free_brackets:
            return len(free_brackets) % 2 == 0

        return not open_brackets


Solution 2:

class Solution:
    def canBeValid(self, s: str, locked: str) -> bool:
        n = len(s)
        if n % 2 == 1:
            return False

        # Left-to-right pass: ensure we can balance open '(' brackets
        balance = 0  # Tracks net '(' count
        free = 0     # Tracks available "free" slots
        for i in range(n):
            if locked[i] == '0':
                free += 1
            elif s[i] == '(':
                balance += 1
            else:  # s[i] == ')'
                if balance > 0:
                    balance -= 1
                elif free > 0:
                    free -= 1
                else:
                    return False

        # Right-to-left pass: ensure we can balance close ')' brackets
        balance = 0
        free = 0
        for i in range(n - 1, -1, -1):
            if locked[i] == '0':
                free += 1
            elif s[i] == ')':
                balance += 1
            else:  # s[i] == '('
                if balance > 0:
                    balance -= 1
                elif free > 0:
                    free -= 1
                else:
                    return False

        return True