2145. Count the Hidden Sequences
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].

You are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.

For example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive).
[3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences.
[5, 6, 3, 7] is not possible since it contains an element greater than 6.
[1, 2, 3, 4] is not possible since the differences are not correct.
Return the number of possible hidden sequences there are. If there are no possible sequences, return 0.

 

Example 1:

Input: differences = [1,-3,4], lower = 1, upper = 6
Output: 2
Explanation: The possible hidden sequences are:
- [3, 4, 1, 5]
- [4, 5, 2, 6]
Thus, we return 2.
Example 2:

Input: differences = [3,-4,5,1,-2], lower = -4, upper = 5
Output: 4
Explanation: The possible hidden sequences are:
- [-3, 0, -4, 1, 2, 0]
- [-2, 1, -3, 2, 3, 1]
- [-1, 2, -2, 3, 4, 2]
- [0, 3, -1, 4, 5, 3]
Thus, we return 4.
Example 3:

Input: differences = [4,-7,2], lower = 3, upper = 6
Output: 0
Explanation: There are no possible hidden sequences. Thus, we return 0.
 

Constraints:

n == differences.length
1 <= n <= 105
-105 <= differences[i] <= 105
-105 <= lower <= upper <= 105


Solution 1:

class Solution:
    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -> int:
        # Initialize min_val and max_val to track the minimum and maximum cumulative differences.
        # 'curr' represents the cumulative sum (offset) starting from the first element.
        min_val, max_val = 0, 0
        curr = 0

        # Iterate through each difference in the 'differences' array.
        for d in differences:
            curr += d  # Update the cumulative sum with the current difference.
            
            # Update min_val and max_val with the smallest and largest cumulative sums observed so far.
            min_val = min(min_val, curr)
            max_val = max(max_val, curr)
            
            # Check if it's impossible to form a valid sequence.
            # The spread between max_val and min_val must not exceed the allowed range (upper - lower).
            # If it does, even the best shift would not fit the sequence within [lower, upper].
            if max_val - min_val > upper - lower:
                return 0  # Return 0 when no valid starting value can make all elements lie in [lower, upper].

        # At this point, we know that there exists some starting value 'x' so that
        # the hidden sequence values will be in the form: hidden[i] = x + (cumulative offset).
        # The smallest hidden value is: x + min_val, which must be >= lower.
        # The largest hidden value is: x + max_val, which must be <= upper.
        #
        # This leads to the following constraints on the starting value 'x':
        #   x >= lower - min_val   and   x <= upper - max_val.
        #
        # Therefore, the number of valid starting values 'x' is given by:
        #   (upper - max_val) - (lower - min_val) + 1.
        return (upper - max_val) - (lower - min_val) + 1