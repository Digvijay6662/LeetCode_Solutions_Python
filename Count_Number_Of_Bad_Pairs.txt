2364. Count Number of Bad Pairs
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i].

Return the total number of bad pairs in nums.

 

Example 1:

Input: nums = [4,1,3,3]
Output: 5
Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.
The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.
The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.
The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.
The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.
There are a total of 5 bad pairs, so we return 5.
Example 2:

Input: nums = [1,2,3,4,5]
Output: 0
Explanation: There are no bad pairs.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109


Solution 1:

class Solution:
    def countBadPairs(self, nums: List[int]) -> int:
        total_bad_pairs = 0
        # Dictionary to count the frequency of the key (index - num)
        frequency = defaultdict(int)

        for current_index, num in enumerate(nums):
            # Calculate the key based on the current index and its value.
            key = current_index - num
            
            # For the current index, the number of pairs formed with previous indices is `current_index`.
            # Out of these, frequency[key] pairs are good pairs (they satisfy the condition).
            # Hence, the number of bad pairs ending at this index is:
            #   current_index - frequency[key]
            total_bad_pairs += current_index - frequency[key]
            frequency[key] += 1
        
        return total_bad_pairs