1948. Delete Duplicate Folders in System
Solved
Hard
Topics
premium lock icon
Companies
Hint
Due to a bug, there are many duplicate folders in a file system. You are given a 2D array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system.

For example, ["one", "two", "three"] represents the path "/one/two/three".
Two folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. The folders do not need to be at the root level to be identical. If two or more folders are identical, then mark the folders as well as all their subfolders.

For example, folders "/a" and "/b" in the file structure below are identical. They (as well as their subfolders) should all be marked:
/a
/a/x
/a/x/y
/a/z
/b
/b/x
/b/x/y
/b/z
However, if the file structure also included the path "/b/w", then the folders "/a" and "/b" would not be identical. Note that "/a/x" and "/b/x" would still be considered identical even with the added folder.
Once all the identical folders and their subfolders have been marked, the file system will delete all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.

Return the 2D array ans containing the paths of the remaining folders after deleting all the marked folders. The paths may be returned in any order.

 

Example 1:


Input: paths = [["a"],["c"],["d"],["a","b"],["c","b"],["d","a"]]
Output: [["d"],["d","a"]]
Explanation: The file structure is as shown.
Folders "/a" and "/c" (and their subfolders) are marked for deletion because they both contain an empty
folder named "b".
Example 2:


Input: paths = [["a"],["c"],["a","b"],["c","b"],["a","b","x"],["a","b","x","y"],["w"],["w","y"]]
Output: [["c"],["c","b"],["a"],["a","b"]]
Explanation: The file structure is as shown. 
Folders "/a/b/x" and "/w" (and their subfolders) are marked for deletion because they both contain an empty folder named "y".
Note that folders "/a" and "/c" are identical after the deletion, but they are not deleted because they were not marked beforehand.
Example 3:


Input: paths = [["a","b"],["c","d"],["c"],["a"]]
Output: [["c"],["c","d"],["a"],["a","b"]]
Explanation: All folders are unique in the file system.
Note that the returned array can be in a different order as the order does not matter.
 

Constraints:

1 <= paths.length <= 2 * 104
1 <= paths[i].length <= 500
1 <= paths[i][j].length <= 10
1 <= sum(paths[i][j].length) <= 2 * 105
path[i][j] consists of lowercase English letters.
No two paths lead to the same folder.
For any folder not at the root level, its parent folder will also be in the input.


Solution 1:

class FolderNode:
    """
    Represents a single folder in the tree.
    - name: its name (e.g. "a", "b", "/")
    - children: map from child-name to FolderNode
    - serial: a string encoding of its entire subtree structure
    """
    __slots__ = ('name', 'children', 'serial')
    
    def __init__(self, name: str):
        self.name = name
        self.children: Dict[str, FolderNode] = {}
        self.serial: str = ""

class Solution:
    def deleteDuplicateFolder(self, paths: List[List[str]]) -> List[List[str]]:
        """
        1) Build a folder‐tree from all absolute paths.
        2) Compute a unique serialization for each subtree.
        3) Count how many times each serialization appears.
        4) Prune any subtree whose serialization appears >1.
        5) Collect all remaining folder paths.
        """
        # Step 1: Build the tree under a dummy root "/" node.
        root = FolderNode("/")  
        for path in paths:
            self._insert_path(root, path)
        
        # Step 2: Build a map: serialization -> occurrence count
        serial_count: Dict[str, int] = {}
        self._compute_serials(root, serial_count)
        
        # Step 3: Prune duplicate subtrees
        self._prune_duplicates(root, serial_count)
        
        # Step 4: Collect remaining paths for the answer
        result: List[List[str]] = []
        self._collect_paths(root, [], result)
        return result

    def _insert_path(self, root: FolderNode, path: List[str]) -> None:
        """
        Walks down from `root` and creates missing FolderNode children
        for each part in the given `path`.
        """
        node = root
        for part in path:
            if part not in node.children:
                node.children[part] = FolderNode(part)
            node = node.children[part]

    def _compute_serials(self, node: FolderNode, serial_count: Dict[str, int]) -> str:
        """
        Recursively computes `node.serial` as a string encoding of its
        children’s names + their sub-serials, sorted lexicographically.
        
        Example:
          If node has children a (serial="") and b (serial="(x)"),
          then node.serial = "(a)(b(x))"
        
        Non-leaf serials are counted in serial_count.
        """
        parts: List[str] = []
        for child in node.children.values():
            child_serial = self._compute_serials(child, serial_count)
            # Prefix the serial with the child's name
            parts.append(child.name + child_serial)
        
        if parts:
            # Sort to ensure different child‐orderings yield the same serial
            parts.sort()
            # Wrap each part in parentheses to avoid ambiguity
            node.serial = "(" + ")(".join(parts) + ")"
            serial_count[node.serial] = serial_count.get(node.serial, 0) + 1
        else:
            # Leaf folder → no children
            node.serial = ""
        
        return node.serial

    def _prune_duplicates(self, node: FolderNode, serial_count: Dict[str, int]) -> None:
        """
        Recursively delete any child subtree whose serialization
        appears more than once in the entire tree.
        """
        # We convert keys to a list to avoid “dictionary changed size” errors
        for child_name in list(node.children):
            child = node.children[child_name]
            # If this subtree is duplicated, remove it wholesale
            if child.serial and serial_count.get(child.serial, 0) > 1:
                del node.children[child_name]
            else:
                # Otherwise keep descending down
                self._prune_duplicates(child, serial_count)

    def _collect_paths(self, node: FolderNode, curr_path: List[str], result: List[List[str]]) -> None:
        """
        DFS through the pruned tree, appending each folder path
        to `result`. `curr_path` accumulates the names from root → here.
        """
        for child_name, child in node.children.items():
            curr_path.append(child_name)
            # Record this folder’s absolute path
            result.append(curr_path.copy())
            # Recurse into subfolders
            self._collect_paths(child, curr_path, result)
            # Backtrack
            curr_path.pop()


Solution 2:

class Node:
    __slots__ = ('name', 'children', 'serial')
    def __init__(self, name: str):
        # name: the folder name (e.g. "a" or "b")
        # children: map each subfolder name to its Node
        # serial: will hold a unique string representing the subtree structure
        self.name = name
        self.children = {}   
        self.serial = ""

class Solution:
    def deleteDuplicateFolder(self, paths: List[List[str]]) -> List[List[str]]:
        """
        Deletes all folders (and their descendants) that have an identical 
        subfolder structure elsewhere in the tree.

        Example input:
            paths = [
                ["a"], ["c"], ["a","b"], ["c","b"]
            ]
        Initial tree:
            root
             ├─ a
             │   └─ b
             └─ c
                 └─ b
        Both /a and /c have an empty "b" subfolder → they’re identical.
        """

        # 1) Build the folder tree under a virtual root
        root = Node("")  
        for path in paths:
            cur = root
            for name in path:
                # create child node if missing
                if name not in cur.children:
                    cur.children[name] = Node(name)
                cur = cur.children[name]
        # Now we have a tree with structure exactly matching all input paths

        # 2) Bottom-up serialize each subtree and record frequency of each serial
        freq = defaultdict(int)

        def dfs_serialize(node: Node) -> str:
            """
            Returns a serialization string for this node’s subtree.
            Leaves get "", non-leaves get "(child1_serial)(child2_serial)..."
            where each childN_serial is "name+its_serial", sorted alphabetically.
            """
            parts = []
            for child in node.children.values():
                # serialize child subtree first
                child_serial = dfs_serialize(child)
                # combine folder name + its subtree serial
                parts.append(child.name + child_serial)

            if not parts:
                # leaf node → no children
                node.serial = ""
            else:
                # sort so siblings’ serials are in stable order
                parts.sort()
                # wrap each sibling’s segment in parentheses
                # e.g. parts = ["b", "d(f)"] → "(b)(d(f))"
                node.serial = "(" + ")(".join(parts) + ")"
                # count only non-empty structures
                freq[node.serial] += 1

            return node.serial

        # run serialization starting from root
        dfs_serialize(root)

        # 3) Determine which subtree-serials appear more than once
        dup_serials = {s for s, count in freq.items() if count > 1}
        # In our example, the serial for "/a" and "/c" would be "(b)", so dup_serials = {"(b)"}

        # 4) Re-traverse and collect surviving paths, skipping any subtree in dup_serials
        ans: List[List[str]] = []

        def dfs_collect(node: Node, path: List[str]):
            for child in node.children.values():
                # if this child’s subtree serial is marked duplicate, drop it entirely
                if child.serial and child.serial in dup_serials:
                    # e.g. skip /a and /c subtrees in our example
                    continue

                # otherwise, record the path leading to this child
                new_path = path + [child.name]
                ans.append(new_path)

                # recurse into surviving subtree
                dfs_collect(child, new_path)

        # start collecting from the virtual root, with an empty path
        dfs_collect(root, [])

        # ans now holds all remaining folder-paths
        return ans