2523. Closest Prime Numbers in Range
Solved
Medium
Topics
Companies
Hint
Given two positive integers left and right, find the two integers num1 and num2 such that:

left <= num1 < num2 <= right .
Both num1 and num2 are prime numbers.
num2 - num1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the smallest num1 value. If no such numbers exist, return [-1, -1].

 

Example 1:

Input: left = 10, right = 19
Output: [11,13]
Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.
The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].
Since 11 is smaller than 17, we return the first pair.
Example 2:

Input: left = 4, right = 6
Output: [-1,-1]
Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.
 

Constraints:

1 <= left <= right <= 106


Solution 1:

class Solution:
    def closestPrimes(self, left: int, right: int) -> List[int]:
        # Create a sieve for numbers from 0 to right.
        sieve = [True] * (right + 1)
        sieve[0] = sieve[1] = False  # 0 and 1 are not primes.

        # Only iterate up to sqrt(right) and mark multiples starting from i * i.
        for i in range(2, int(right ** 0.5) + 1):
            if sieve[i]:
                for j in range(i * i, right + 1, i):
                    sieve[j] = False

        prev = -1
        result = [-1, -1]
        min_diff = float('inf')

        # Iterate through the range [left, right] to find the closest primes.
        for num in range(left, right + 1):
            if sieve[num]:
                if prev != -1 and num - prev < min_diff:
                    min_diff = num - prev
                    result = [prev, num]
                prev = num

        return result