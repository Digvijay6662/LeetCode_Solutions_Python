2349. Design a Number Container System
Solved
Medium
Topics
Companies
Hint
Design a number container system that can do the following:

Insert or Replace a number at the given index in the system.
Return the smallest index for the given number in the system.
Implement the NumberContainers class:

NumberContainers() Initializes the number container system.
void change(int index, int number) Fills the container at index with the number. If there is already a number at that index, replace it.
int find(int number) Returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.
 

Example 1:

Input
["NumberContainers", "find", "change", "change", "change", "change", "find", "change", "find"]
[[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]
Output
[null, -1, null, null, null, null, 1, null, 2]

Explanation
NumberContainers nc = new NumberContainers();
nc.find(10); // There is no index that is filled with number 10. Therefore, we return -1.
nc.change(2, 10); // Your container at index 2 will be filled with number 10.
nc.change(1, 10); // Your container at index 1 will be filled with number 10.
nc.change(3, 10); // Your container at index 3 will be filled with number 10.
nc.change(5, 10); // Your container at index 5 will be filled with number 10.
nc.find(10); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1.
nc.change(1, 20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20. 
nc.find(10); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2.
 

Constraints:

1 <= index, number <= 109
At most 105 calls will be made in total to change and find.


Solution 1:

class NumberContainers:
    def __init__(self):
        # Map from index to its current number.
        self.index_to_num = {}
        # For each number, store the indices (in sorted order) that currently have that number.
        self.number_indices = defaultdict(SortedSet)

    def change(self, index: int, number: int) -> None:
        # If the index already has a number, we need to remove it from the old number's SortedList.
        if index in self.index_to_num:
            old_number = self.index_to_num[index]
            # Remove the index from the SortedList for the old number.
            self.number_indices[old_number].remove(index)
            if not self.number_indices[old_number]:
                del self.number_indices[old_number]

        # Update the mapping for the given index.
        self.index_to_num[index] = number
        # Add the index to the SortedList for the new number.
        self.number_indices[number].add(index)

    def find(self, number: int) -> int:
        # If there is at least one index for the given number, return the smallest one.
        if self.number_indices[number]:
            return self.number_indices[number][0]
        # Otherwise, return -1 as no index currently holds that number.
        return -1
        


# Your NumberContainers object will be instantiated and called as such:
# obj = NumberContainers()
# obj.change(index,number)
# param_2 = obj.find(number)


Solution 2:

class NumberContainers:
    def __init__(self):
        self.index_to_num = {}  # Maps index to number
        self.number_indices = defaultdict(list)  # Maps number to a min-heap of indices

    def change(self, index: int, number: int) -> None:
        # Update the index with the new number
        self.index_to_num[index] = number
        # Push the index into the new number's heap
        heapq.heappush(self.number_indices[number], index)

    def find(self, number: int) -> int:
        # Pop indices from the heap until we find a valid one
        while self.number_indices[number]:
            idx = heapq.heappop(self.number_indices[number])
            if self.index_to_num.get(idx) == number:
                # Push the index back into the heap for future use
                heapq.heappush(self.number_indices[number], idx)
                return idx
        return -1
        


# Your NumberContainers object will be instantiated and called as such:
# obj = NumberContainers()
# obj.change(index,number)
# param_2 = obj.find(number)