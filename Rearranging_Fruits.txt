2561. Rearranging Fruits
Solved
Hard
Topics
premium lock icon
Companies
Hint
You have two fruit baskets containing n fruits each. You are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want:

Chose two indices i and j, and swap the ith fruit of basket1 with the jth fruit of basket2.
The cost of the swap is min(basket1[i],basket2[j]).
Two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.

Return the minimum cost to make both the baskets equal or -1 if impossible.

 

Example 1:

Input: basket1 = [4,2,2,2], basket2 = [1,4,1,2]
Output: 1
Explanation: Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. Rearranging both the arrays makes them equal.
Example 2:

Input: basket1 = [2,3,4,1], basket2 = [3,2,5,1]
Output: -1
Explanation: It can be shown that it is impossible to make both the baskets equal.
 

Constraints:

basket1.length == basket2.length
1 <= basket1.length <= 105
1 <= basket1[i],basket2[i] <= 109


Solution 1:

class Solution:
    def minCost(self, basket1: List[int], basket2: List[int]) -> int:
        # diff_counts will store the net difference of each fruit between the two baskets
        diff_counts = defaultdict(int)
        # global_min tracks the smallest fruit cost across both baskets
        global_min = float('inf')

        # Count each fruit in basket1 and update global_min
        for fruit in basket1:
            diff_counts[fruit] += 1
            if fruit < global_min:
                global_min = fruit

        # Subtract each fruit in basket2 and update global_min
        for fruit in basket2:
            diff_counts[fruit] -= 1
            if fruit < global_min:
                global_min = fruit

        # Gather fruits that have an imbalance (must be corrected by swapping)
        imbalanced_fruits = []
        for fruit, net_diff in diff_counts.items():
            # no action needed if counts match
            if net_diff == 0:
                continue

            # if the difference is odd, balancing is impossible
            if abs(net_diff) % 2 == 1:
                return -1

            # Add |net_diff|/2 copies of this fruit to the swap-candidate list
            # Each copy represents one necessary fruit to move
            for _ in range(abs(net_diff) // 2):
                imbalanced_fruits.append(fruit)

        # Sort to pair cheapest fruits first for direct swaps
        imbalanced_fruits.sort()

        total_cost = 0
        # Only need to consider the first half of imbalanced_fruits for direct swapping
        for i in range(len(imbalanced_fruits) // 2):
            # Cost of swapping these two directly vs swapping each through two global_min fruits
            direct_cost = imbalanced_fruits[i]
            via_global_min_cost = global_min * 2
            total_cost += min(direct_cost, via_global_min_cost)

        return total_cost