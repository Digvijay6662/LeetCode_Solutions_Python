2698. Find the Punishment Number of an Integer
Solved
Medium
Topics
Companies
Hint
Given a positive integer n, return the punishment number of n.

The punishment number of n is defined as the sum of the squares of all integers i such that:

1 <= i <= n
The decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.
 

Example 1:

Input: n = 10
Output: 182
Explanation: There are exactly 3 integers i in the range [1, 10] that satisfy the conditions in the statement:
- 1 since 1 * 1 = 1
- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 and 1 with a sum equal to 8 + 1 == 9.
- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 and 0 with a sum equal to 10 + 0 == 10.
Hence, the punishment number of 10 is 1 + 81 + 100 = 182
Example 2:

Input: n = 37
Output: 1478
Explanation: There are exactly 4 integers i in the range [1, 37] that satisfy the conditions in the statement:
- 1 since 1 * 1 = 1. 
- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. 
- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. 
- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.
Hence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478
 

Constraints:

1 <= n <= 1000


Solution 1:

class Solution:
    def punishmentNumber(self, n: int) -> int:
        def can_partition(i, target, s, start):
            if start == len(s):
                return target == 0  # Base case: check if the target sum is achieved
            
            current_sum = 0
            for j in range(start, len(s)):
                current_sum = current_sum * 10 + int(s[j])  # Build the current number
                if current_sum > target:
                    break  # Early termination if the current sum exceeds the target
                if can_partition(i, target - current_sum, s, j + 1):
                    return True  # Recursively check the remaining substring
            return False  # No valid partition found

        result = 0
        for i in range(1, n + 1):
            square = i * i
            if can_partition(i, i, str(square), 0):
                result += square  # Add the square to the result if a valid partition exists

        return result


Solution 2:


class Solution:
    def punishmentNumber(self, n: int) -> int:
        def can_partition(num, target):
            if target < 0 or num < target:
                return False

            if num == target:
                return True

            ans = False
            ans |= can_partition(num // 10, target - num % 10)
            ans |= can_partition(num // 100, target - num % 100)
            ans |= can_partition(num // 1000, target - num % 1000)
            return ans
            

        result = 0
        for i in range(1, n + 1):
            square = i * i
            if can_partition(square, i):
                result += square  # Add the square to the result if a valid partition exists

        return result