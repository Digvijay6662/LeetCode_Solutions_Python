3333. Find the Original Typed String II
Solved
Hard
Topics
premium lock icon
Companies
Hint
Alice is attempting to type a specific string on her computer. However, she tends to be clumsy and may press a key for too long, resulting in a character being typed multiple times.

You are given a string word, which represents the final output displayed on Alice's screen. You are also given a positive integer k.

Return the total number of possible original strings that Alice might have intended to type, if she was trying to type a string of size at least k.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: word = "aabbccdd", k = 7

Output: 5

Explanation:

The possible strings are: "aabbccdd", "aabbccd", "aabbcdd", "aabccdd", and "abbccdd".

Example 2:

Input: word = "aabbccdd", k = 8

Output: 1

Explanation:

The only possible string is "aabbccdd".

Example 3:

Input: word = "aaabbb", k = 3

Output: 8

 

Constraints:

1 <= word.length <= 5 * 105
word consists only of lowercase English letters.
1 <= k <= 2000


Solution 1:

class Solution:
    def possibleStringCount(self, word: str, k: int) -> int:
        n = len(word)
        if k > n:
            return 0

        MOD = 10**9 + 7

        # 1) Build run‐length array
        freq = []
        cnt = 1
        for i in range(1, n):
            if word[i] == word[i-1]:
                cnt += 1
            else:
                freq.append(cnt)
                cnt = 1
        freq.append(cnt)

        m = len(freq)

        # 2) Compute total = product of all run‐lengths
        total = 1
        for f in freq:
            total = total * f % MOD

        # 3) If even the shortest possible original (one char per run) is ≥ k, nothing to subtract
        if m >= k:
            return total

        # 4) DP table: dp[i][j] = # ways using runs i..end so that (sum_so_far + j) < k
        dp = [[0] * k for _ in range(m+1)]
        # base case: at i==m, any j<k is “too short” ⇒ 1 way
        for j in range(k):
            dp[m][j] = 1

        # 5) Fill DP bottom‐up
        for i in range(m-1, -1, -1):
            # build prefix sums of dp[i+1][*]
            prefix = [0] * k
            prefix[0] = dp[i+1][0]
            for p in range(1, k):
                prefix[p] = (prefix[p-1] + dp[i+1][p]) % MOD

            for j in range(k-1, -1, -1):
                # we want sum of dp[i+1][j+1] .. dp[i+1][j+freq[i]]
                l = j + 1
                r = min(k-1, j + freq[i])
                if l > r:
                    dp[i][j] = 0
                else:
                    right_bound  = prefix[r]
                    left_bound = prefix[l-1] if l-1 >= 0 else 0
                    dp[i][j] = (right_bound - left_bound) % MOD

        # invalid = ways that end up shorter than k
        invalid = dp[0][0]

        return (total - invalid + MOD) % MOD