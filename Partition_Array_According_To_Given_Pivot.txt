2161. Partition Array According to Given Pivot
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:

Every element less than pivot appears before every element greater than pivot.
Every element equal to pivot appears in between the elements less than and greater than pivot.
The relative order of the elements less than pivot and the elements greater than pivot is maintained.
More formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. If i < j and both elements are smaller (or larger) than pivot, then pi < pj.
Return nums after the rearrangement.

 

Example 1:

Input: nums = [9,12,5,10,14,3,10], pivot = 10
Output: [9,5,3,10,10,12,14]
Explanation: 
The elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.
The elements 12 and 14 are greater than the pivot so they are on the right side of the array.
The relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings.
Example 2:

Input: nums = [-3,4,3,2], pivot = 2
Output: [-3,2,4,3]
Explanation: 
The element -3 is less than the pivot so it is on the left side of the array.
The elements 4 and 3 are greater than the pivot so they are on the right side of the array.
The relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings.
 

Constraints:

1 <= nums.length <= 105
-106 <= nums[i] <= 106
pivot equals to an element of nums.


Solution 1:

class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        less_than = []
        equal_to = []
        greater_than = []
        
        for num in nums:
            if num < pivot:
                less_than.append(num)
            elif num == pivot:
                equal_to.append(num)
            else:
                greater_than.append(num)
        
        return less_than + equal_to + greater_than


Solution 2:

class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        n = len(nums)
        less = 0
        equal = 0
        
        for num in nums:
            if num < pivot:
                less += 1
            elif num == pivot:
                equal += 1
        
        less_i = 0
        equal_i = less
        greater_i = less + equal
        result = [0] * n

        for num in nums:
            if num < pivot:
                result[less_i]  = num
                less_i += 1
            elif num == pivot:
                result[equal_i] = num
                equal_i += 1
            else:
                result[greater_i] = num
                greater_i += 1

        return result


Solution 3:

class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        n = len(nums)
        less_i = 0
        greater_i = n - 1
        result = [0] * n

        for i, j in zip(range(n), range(n - 1, -1, -1)):
            if nums[i] < pivot:
                result[less_i] = nums[i]
                less_i += 1
            if nums[j] > pivot:
                result[greater_i] = nums[j]
                greater_i -= 1

        while less_i <= greater_i:
            result[less_i] = pivot
            less_i += 1

        return result