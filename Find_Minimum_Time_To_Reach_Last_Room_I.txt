3341. Find Minimum Time to Reach Last Room I
Solved
Medium
Topics
Companies
Hint
There is a dungeon with n x m rooms arranged as a grid.

You are given a 2D array moveTime of size n x m, where moveTime[i][j] represents the minimum time in seconds when you can start moving to that room. You start from the room (0, 0) at time t = 0 and can move to an adjacent room. Moving between adjacent rooms takes exactly one second.

Return the minimum time to reach the room (n - 1, m - 1).

Two rooms are adjacent if they share a common wall, either horizontally or vertically.

 

Example 1:

Input: moveTime = [[0,4],[4,4]]

Output: 6

Explanation:

The minimum time required is 6 seconds.

At time t == 4, move from room (0, 0) to room (1, 0) in one second.
At time t == 5, move from room (1, 0) to room (1, 1) in one second.
Example 2:

Input: moveTime = [[0,0,0],[0,0,0]]

Output: 3

Explanation:

The minimum time required is 3 seconds.

At time t == 0, move from room (0, 0) to room (1, 0) in one second.
At time t == 1, move from room (1, 0) to room (1, 1) in one second.
At time t == 2, move from room (1, 1) to room (1, 2) in one second.
Example 3:

Input: moveTime = [[0,1],[1,2]]

Output: 3

 

Constraints:

2 <= n == moveTime.length <= 50
2 <= m == moveTime[i].length <= 50
0 <= moveTime[i][j] <= 109


Solution 1:

class Solution:
    def minTimeToReach(self, moveTime: List[List[int]]) -> int:
        n, m = len(moveTime), len(moveTime[0])
        directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
        start_time = 0  
        minHeap = [(start_time, 0, 0)]
        visited = {(0, 0)}

        while minHeap:
            curr_time, x, y = heapq.heappop(minHeap)
            if x == n - 1 and y == m - 1:
                return curr_time
            for dx, dy in directions:
                r, c = x + dx, y + dy
                if 0 <= r < n and 0 <= c < m and (r, c) not in visited:
                    # You must wait until max(curr_time, moveTime[r][c]) to start moving, then add 1 second for the move.
                    new_time = max(curr_time, moveTime[r][c]) + 1
                    heapq.heappush(minHeap, (new_time, r, c))
                    visited.add((r, c))

        return -1


Solution 2:

class Solution:
    def minTimeToReach(self, moveTime: List[List[int]]) -> int:
        n = len(moveTime)
        m = len(moveTime[0])
        
        # Initialize a distance matrix with a large value.
        dist = [[float('inf')] * m for _ in range(n)]
        # Starting at (0, 0) at time 0. Note that even if moveTime[0][0] > 0,
        # we consider that you are already in (0, 0) at time 0.
        dist[0][0] = 0 
        
        # Priority queue for Dijkstra: (arrival_time, x, y)
        heap = [(0, 0, 0)]
        
        # Directions: up, right, down, left
        directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
        
        while heap:
            current_time, x, y = heapq.heappop(heap)
            
            # Skip if we have already found a better way to (x, y)
            if current_time > dist[x][y]:
                continue
            
            # Check if we've reached the target room.
            if x == n - 1 and y == m - 1:
                return current_time
            
            # Explore all adjacent cells.
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < m:
                    # Calculate new time: wait until the room is available, then add move time
                    new_time = max(current_time, moveTime[nx][ny]) + 1
                    if new_time < dist[nx][ny]:
                        dist[nx][ny] = new_time
                        heapq.heappush(heap, (new_time, nx, ny))
        
        return -1  #