3439. Reschedule Meetings for Maximum Free Time I
Solved
Medium
Topics
premium lock icon
Companies
Hint
You are given an integer eventTime denoting the duration of an event, where the event occurs from time t = 0 to time t = eventTime.

You are also given two integer arrays startTime and endTime, each of length n. These represent the start and end time of n non-overlapping meetings, where the ith meeting occurs during the time [startTime[i], endTime[i]].

You can reschedule at most k meetings by moving their start time while maintaining the same duration, to maximize the longest continuous period of free time during the event.

The relative order of all the meetings should stay the same and they should remain non-overlapping.

Return the maximum amount of free time possible after rearranging the meetings.

Note that the meetings can not be rescheduled to a time outside the event.

 

Example 1:

Input: eventTime = 5, k = 1, startTime = [1,3], endTime = [2,5]

Output: 2

Explanation:



Reschedule the meeting at [1, 2] to [2, 3], leaving no meetings during the time [0, 2].

Example 2:

Input: eventTime = 10, k = 1, startTime = [0,2,9], endTime = [1,4,10]

Output: 6

Explanation:



Reschedule the meeting at [2, 4] to [1, 3], leaving no meetings during the time [3, 9].

Example 3:

Input: eventTime = 5, k = 2, startTime = [0,1,2,3,4], endTime = [1,2,3,4,5]

Output: 0

Explanation:

There is no time during the event not occupied by meetings.

 

Constraints:

1 <= eventTime <= 109
n == startTime.length == endTime.length
2 <= n <= 105
1 <= k <= n
0 <= startTime[i] < endTime[i] <= eventTime
endTime[i] <= startTime[i + 1] where i lies in the range [0, n - 2].



Solution 1:

class Solution:
    def maxFreeTime(self, eventTime: int, k: int, startTime: List[int], endTime: List[int]) -> int:
        n = len(startTime)
        # Build the gaps array of length n+1:
        # g[0] = time from 0 to first meeting start
        # g[i] = time between end of meeting i-1 and start of meeting i
        # g[n] = time from last meeting end to eventTime
        gaps = [0] * (n + 1)
        gaps[0] = startTime[0] - 0
        for i in range(1, n):
            gaps[i] = startTime[i] - endTime[i - 1]
        gaps[n] = eventTime - endTime[n - 1]
        
        # We will remove k meetings, which merges k+1 consecutive gaps into one block.
        # So we want the maximum sum of any window of length (k+1) in gaps.
        window_size = k + 1
        
        # Compute sum of the first window [0 .. k]
        curr_sum = sum(gaps[0 : window_size])
        max_sum = curr_sum
        
        # Slide the window across gaps[1 .. n]
        for i in range(window_size, n + 1):
            curr_sum += gaps[i]            # include the new rightmost gap
            curr_sum -= gaps[i - window_size]  # drop the old leftmost gap
            if curr_sum > max_sum:
                max_sum = curr_sum
        
        return max_sum