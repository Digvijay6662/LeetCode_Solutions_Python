1718. Construct the Lexicographically Largest Valid Sequence
Solved
Medium
Topics
Companies
Hint
Given an integer n, find a sequence that satisfies all of the following:

The integer 1 occurs once in the sequence.
Each integer between 2 and n occurs twice in the sequence.
For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.
The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.

A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.

 

Example 1:

Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.
Example 2:

Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]
 

Constraints:

1 <= n <= 20


Solution 1:

class Solution:
    def constructDistancedSequence(self, n: int) -> List[int]:
        size = 2 * n - 1
        result = [-1] * size
        used = [False] * (n + 1)  # used[i] is True if i has been placed

        def backtrack(index: int) -> bool:
            # If we've filled the sequence, we're done.
            if index == size:
                return True
            
            # If this position is already filled, move to the next.
            if result[index] != -1:
                return backtrack(index + 1)
            
            # Try to place numbers from n down to 1 (to get lexicographically largest)
            for num in range(n, 0, -1):
                if used[num]:
                    continue
                # Special case: 1 occurs only once.
                if num == 1:
                    result[index] = 1
                    used[1] = True
                    if backtrack(index + 1):
                        return True
                    # Backtrack:
                    result[index] = -1
                    used[1] = False
                else:
                    # For num >= 2, the two occurrences must be exactly num apart.
                    second_index = index + num
                    if second_index < size and result[second_index] == -1:
                        # Place both occurrences.
                        result[index] = num
                        result[second_index] = num
                        used[num] = True
                        if backtrack(index + 1):
                            return True
                        # Backtrack:
                        result[index] = -1
                        result[second_index] = -1
                        used[num] = False
            return False

        backtrack(0)
        return result