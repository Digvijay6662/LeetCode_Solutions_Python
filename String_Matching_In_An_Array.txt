1408. String Matching in an Array
Solved
Easy
Topics
Companies
Hint
Given an array of string words, return all strings in words that is a substring of another word. You can return the answer in any order.

A substring is a contiguous sequence of characters within a string

 

Example 1:

Input: words = ["mass","as","hero","superhero"]
Output: ["as","hero"]
Explanation: "as" is substring of "mass" and "hero" is substring of "superhero".
["hero","as"] is also a valid answer.
Example 2:

Input: words = ["leetcode","et","code"]
Output: ["et","code"]
Explanation: "et", "code" are substring of "leetcode".
Example 3:

Input: words = ["blue","green","bu"]
Output: []
Explanation: No string of words is substring of another string.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 30
words[i] contains only lowercase English letters.
All the strings of words are unique.


Solution 1:

class Solution:
    def stringMatching(self, words: List[str]) -> List[str]:
        result = []

        for i, word in enumerate(words):
            for j, other_word in enumerate(words):
                if i != j and word in other_word:
                    result.append(word)
                    break
        
        return result


Solution 2:

class Solution:
    def stringMatching(self, words: List[str]) -> List[str]:
        n = len(words)
        result = []
        words.sort(key = len)

        for i in range(n):
            word = words[i]
            for j in range(i + 1, n):
                if word in words[j]:
                    result.append(word)
                    break
        
        return result


Solution 3:

class TrieNode:
    def __init__(self):
        self.children = {}
        self.count = 0

class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
            node.count += 1
    
    def search_substring(self, word):
        node = self.root
        for char in word:
            node = node.children[char]
        return node.count > 1

class Solution:
    def stringMatching(self, words: List[str]) -> List[str]:
        trie = Trie()
        result = []

        for word in words:
            for i in range(len(word)):
                trie.insert(word[i:])
        
        for word in words:
            if trie.search_substring(word):
                result.append(word)
        
        return result