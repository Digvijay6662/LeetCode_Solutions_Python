36. Valid Sudoku
Medium
8.8K
920
Companies
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.


Solution 1:

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        n = len(board)  # Size of the board (should be 9 for standard Sudoku)

        # Dictionaries to track numbers seen in each row, column, and 3x3 box
        rowMap = defaultdict(list)  # Key: row index, Value: list of numbers in that row
        colMap = defaultdict(list)  # Key: column index, Value: list of numbers in that column
        boxMap = defaultdict(list)  # Key: box index, Value: list of numbers in that 3x3 box

        # Loop through each cell in the board
        for i in range(n):  # Iterate over rows
            for j in range(n):  # Iterate over columns
                if board[i][j] == '.':  
                    # Skip empty cells
                    continue

                num = board[i][j]  # Current number in the cell
                # Calculate which 3x3 box this cell belongs to
                # Boxes are numbered 0 to 8 from top-left to bottom-right
                box = (i // 3) * 3 + (j // 3)

                # Check if the number already exists in the same row, column, or box
                if num in rowMap[i] or num in colMap[j] or num in boxMap[box]:
                    return False  # Invalid Sudoku if duplicate found
                else:
                    # Record the number in the corresponding row, column, and box
                    rowMap[i].append(num)
                    colMap[j].append(num)
                    boxMap[box].append(num)

        # If no duplicates found, the Sudoku board is valid
        return True

Solution 2:

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        boardMap = collections.defaultdict(list)

        for i in range(9):
            for j in range(9):
                char = board[i][j]
                if char != '.': 
                    if char in boardMap:
                        for pos in boardMap[char]: 
                            if (pos[0]== i) or (pos[1] == j) or (pos[0]//3 == i//3 and pos[1]//3 == j//3):
                                return False
                    boardMap[char].append((i,j))
   
        return True

