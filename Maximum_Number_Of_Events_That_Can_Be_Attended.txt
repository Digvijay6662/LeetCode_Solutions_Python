1353. Maximum Number of Events That Can Be Attended
Solved
Medium
Topics
premium lock icon
Companies
Hint
You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.

You can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d.

Return the maximum number of events you can attend.

 

Example 1:


Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.
One way to attend them all is as shown.
Attend the first event on day 1.
Attend the second event on day 2.
Attend the third event on day 3.
Example 2:

Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4
 

Constraints:

1 <= events.length <= 105
events[i].length == 2
1 <= startDayi <= endDayi <= 105


Solution 1:

class Solution:
    def maxEvents(self, events: List[List[int]]) -> int:
        # 1. Sort by start day
        events.sort(key=lambda e: e[0])
        min_heap = []
        day = 0
        i = 0
        attended = 0
        n = len(events)

        # 2. While there are unprocessed events or pending ones in the heap
        while i < n or min_heap:
            # Jump day forward if no events are pending
            if not min_heap:
                day = max(day, events[i][0])

            # Push all events starting on or before 'day'
            while i < n and events[i][0] <= day:
                heapq.heappush(min_heap, events[i][1])
                i += 1

            # Discard events that have already expired
            while min_heap and min_heap[0] < day:
                heapq.heappop(min_heap)

            # Attend the event that ends the soonest
            if min_heap:
                heapq.heappop(min_heap)
                attended += 1
                day += 1

        return attended