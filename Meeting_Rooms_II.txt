919 · Meeting Rooms II
Algorithms
Medium
Accepted Rate
53%
Description
Solution89
Notes
Discuss99+
Leaderboard
Record
Description
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.)

Wechat reply 【Two Sigma】 get the latest requent Interview questions. (wechat id : jiuzhang1104)


(0,8),(8,10) is not conflict at 8

Example
Example1

Input: intervals = [(0,30),(5,10),(15,20)]
Output: 2
Explanation:
We need two meeting rooms
room1: (0,30)
room2: (5,10),(15,20)
Example2

Input: intervals = [(2,7)]
Output: 1
Explanation: 
Only need one meeting room

Solution:

from typing import (
    List,
)
from lintcode import (
    Interval,
)

"""
Definition of Interval:
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

class Solution:
    """
    @param intervals: an array of meeting time intervals
    @return: the minimum number of conference rooms required
    """
    def min_meeting_rooms(self, intervals: List[Interval]) -> int:
        start = sorted([i.start for i in intervals])
        end  = sorted([i.end for i in intervals])
        l = r = 0
        res = count = 0

        while l < len(intervals):
            if start[l] < end[r]:
                count +=1
                l+=1
            else:
                count-=1
                r+=1

            res = max(count, res)

        return res


Solution 2:

import heapq
from typing import (
    List,
)


class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end


class Solution:
    """
    @param intervals: an array of meeting time intervals
    @return: the minimum number of conference rooms required
    """
    def min_meeting_rooms(self, intervals: List[Interval]) -> int:
        intervals.sort(key=lambda i: i.start)
        end_times = []
        count = 0
        
        for i in intervals:
            if end_times and end_times[0] <= i.start:
                heapq.heappop(end_times)
            heapq.heappush(end_times, i.end)
            count = max(count, len(end_times))
            
        return count