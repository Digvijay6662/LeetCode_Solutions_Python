2071. Maximum Number of Tasks You Can Assign
Solved
Hard
Topics
Companies
Hint
You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).

Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.

Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.

 

Example 1:

Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
Output: 3
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 2 (0 + 1 >= 1)
- Assign worker 1 to task 1 (3 >= 2)
- Assign worker 2 to task 0 (3 >= 3)
Example 2:

Input: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5
Output: 1
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 0 (0 + 5 >= 5)
Example 3:

Input: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10
Output: 2
Explanation:
We can assign the magical pills and tasks as follows:
- Give the magical pill to worker 0 and worker 1.
- Assign worker 0 to task 0 (0 + 10 >= 10)
- Assign worker 1 to task 1 (10 + 10 >= 15)
The last pill is not given because it will not make any worker strong enough for the last task.
 

Constraints:

n == tasks.length
m == workers.length
1 <= n, m <= 5 * 104
0 <= pills <= m
0 <= tasks[i], workers[j], strength <= 109


Solution 1:

from sortedcontainers import SortedList

class Solution:
    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:
        tasks.sort()         # sort tasks in ascending order
        workers.sort()       # sort workers in ascending order

        n, m = len(tasks), len(workers)
        
        # helper function returns True if x tasks can be completed
        def can_assign(x: int) -> bool:
            pills_left = pills
            available = SortedList(workers[-x:])  # workers available, sorted in ascending order

            # We want to attempt x tasks: use the hardest x tasks, which are tasks[x-1], tasks[x-2], â€¦, tasks[0]
            # (Because tasks is sorted ascending, tasks[-x:] are the largest x tasks.)
            for t in reversed(tasks[:x]):
                # if the strongest available worker can complete the task without a pill, assign them
                if available[-1] >= t:
                    available.pop()
                else:
                    # Otherwise, we need to use a pill. Find the weakest worker who,
                    # after receiving the pill, can complete the task.
                    if pills_left == 0:
                        return False
                    # We need a worker with strength >= (t - strength)
                    idx = available.bisect_left(t - strength)
                    if idx == len(available):
                        return False  # no worker even after getting a pill can satisfy the task
                    available.pop(idx)
                    pills_left -= 1
            return True

        lo, hi = 0, min(n, m)
        ans = 0
        while lo <= hi:
            mid = (lo + hi) // 2
            if can_assign(mid):
                ans = mid
                lo = mid + 1
            else:
                hi = mid - 1
        return ans