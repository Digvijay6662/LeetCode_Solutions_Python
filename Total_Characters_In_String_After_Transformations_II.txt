3337. Total Characters in String After Transformations II
Solved
Hard
Topics
Companies
Hint
You are given a string s consisting of lowercase English letters, an integer t representing the number of transformations to perform, and an array nums of size 26. In one transformation, every character in s is replaced according to the following rules:

Replace s[i] with the next nums[s[i] - 'a'] consecutive characters in the alphabet. For example, if s[i] = 'a' and nums[0] = 3, the character 'a' transforms into the next 3 consecutive characters ahead of it, which results in "bcd".
The transformation wraps around the alphabet if it exceeds 'z'. For example, if s[i] = 'y' and nums[24] = 3, the character 'y' transforms into the next 3 consecutive characters ahead of it, which results in "zab".
Return the length of the resulting string after exactly t transformations.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: s = "abcyy", t = 2, nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]

Output: 7

Explanation:

First Transformation (t = 1):

'a' becomes 'b' as nums[0] == 1
'b' becomes 'c' as nums[1] == 1
'c' becomes 'd' as nums[2] == 1
'y' becomes 'z' as nums[24] == 1
'y' becomes 'z' as nums[24] == 1
String after the first transformation: "bcdzz"
Second Transformation (t = 2):

'b' becomes 'c' as nums[1] == 1
'c' becomes 'd' as nums[2] == 1
'd' becomes 'e' as nums[3] == 1
'z' becomes 'ab' as nums[25] == 2
'z' becomes 'ab' as nums[25] == 2
String after the second transformation: "cdeabab"
Final Length of the string: The string is "cdeabab", which has 7 characters.

Example 2:

Input: s = "azbk", t = 1, nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]

Output: 8

Explanation:

First Transformation (t = 1):

'a' becomes 'bc' as nums[0] == 2
'z' becomes 'ab' as nums[25] == 2
'b' becomes 'cd' as nums[1] == 2
'k' becomes 'lm' as nums[10] == 2
String after the first transformation: "bcabcdlm"
Final Length of the string: The string is "bcabcdlm", which has 8 characters.

 

Constraints:

1 <= s.length <= 105
s consists only of lowercase English letters.
1 <= t <= 109
nums.length == 26
1 <= nums[i] <= 25


Solution 1:

class Solution:
    def lengthAfterTransformations(self, s: str, t: int, nums: List[int]) -> int:
        MOD = 1000000007

        def matrixMultiply(A, B):
            C = [[0] * 26 for _ in range(26)]

            for i in range(26):
                for j in range(26):
                    for k in range(26):
                        C[i][j] = (C[i][j] + (A[i][k] * B[k][j]) % MOD) % MOD
            return C

        def binaryExponentiation(base, power):
            if power == 0:
                I = [[0] * 26 for _ in range(26)]
                for i in range(26):
                    I[i][i] = 1
                return I
            half = binaryExponentiation(base, power // 2)
            result = matrixMultiply(half, half)
            if power % 2 == 1:
                result = matrixMultiply(result, base)
            return result

        freq = [0] * 26
        for ch in s:
            freq[ord(ch) - 97] += 1

        T = [[0] * 26 for _ in range(26)]
        
        for i in range(26):
            for j in range(1, nums[i] + 1):
                T[(i + j) % 26][i] += 1

        result = binaryExponentiation(T, t)

        updated_freq = [0] * 26

        for i in range(26):
            for j in range(26):
                updated_freq[i] = (updated_freq[i] + result[i][j] * freq[j]) % MOD

        return sum(updated_freq) % MOD


Solution 2:

class Solution:
    def lengthAfterTransformations(self, s: str, t: int, nums: List[int]) -> int:
        MOD = 10**9 + 7

        def matrixMultiply(A, B):
            C = [[0] * 26 for _ in range(26)]
            for i in range(26):
                for k in range(26):
                    if A[i][k] == 0:
                        continue
                    for j in range(26):
                        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD
            return C

        def matrixPower(matrix, power):
            result = [[1 if i == j else 0 for j in range(26)] for i in range(26)]
            while power > 0:
                if power % 2 == 1:
                    result = matrixMultiply(result, matrix)
                matrix = matrixMultiply(matrix, matrix)
                power //= 2
            return result

        freq = [0] * 26
        for ch in s:
            freq[ord(ch) - ord('a')] += 1

        T = [[0] * 26 for _ in range(26)]
        for i in range(26):
            for j in range(1, nums[i] + 1):
                next_char = (i + j) % 26
                T[next_char][i] += 1

        T_t = matrixPower(T, t)

        updated_freq = [0] * 26
        for i in range(26):
            for j in range(26):
                updated_freq[i] = (updated_freq[i] + T_t[i][j] * freq[j]) % MOD

        return sum(updated_freq) % MOD


Solution 3:

class Solution:
    def lengthAfterTransformations(self, s: str, t: int, nums: List[int]) -> int:
        MOD = 10**9 + 7

        def matrixMultiply(A, B):
            C = [[0] * 26 for _ in range(26)]
            for i in range(26):
                for k in range(26):
                    if A[i][k] == 0:
                        continue
                    for j in range(26):
                        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD
            return C

        def matrixPower(matrix, power):
            result = [[1 if i == j else 0 for j in range(26)] for i in range(26)]
            while power > 0:
                if power % 2 == 1:
                    result = matrixMultiply(result, matrix)
                matrix = matrixMultiply(matrix, matrix)
                power //= 2
            return result

        freq = [0] * 26
        for ch in s:
            freq[ord(ch) - ord('a')] += 1

        T = [[0] * 26 for _ in range(26)]
        for i in range(26):
            for j in range(1, nums[i] + 1):
                next_char = (i + j) % 26
                T[next_char][i] += 1

        T_t = matrixPower(T, t)

        result = 0
        for i in range(26):
            for j in range(26):
                result = (result + T_t[i][j] * freq[j]) % MOD

        return result