3459. Length of Longest V-Shaped Diagonal Segment
Solved
Hard
Topics
premium lock icon
Companies
Hint
You are given a 2D integer matrix grid of size n x m, where each element is either 0, 1, or 2.

A V-shaped diagonal segment is defined as:

The segment starts with 1.
The subsequent elements follow this infinite sequence: 2, 0, 2, 0, ....
The segment:
Starts along a diagonal direction (top-left to bottom-right, bottom-right to top-left, top-right to bottom-left, or bottom-left to top-right).
Continues the sequence in the same diagonal direction.
Makes at most one clockwise 90-degree turn to another diagonal direction while maintaining the sequence.
Return the length of the longest V-shaped diagonal segment. If no valid segment exists, return 0.

 

Example 1:

Input: grid = [[2,2,1,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]

Output: 5

Explanation:



The longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,2) → (1,3) → (2,4), takes a 90-degree clockwise turn at (2,4), and continues as (3,3) → (4,2).

Example 2:

Input: grid = [[2,2,2,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]

Output: 4

Explanation:



The longest V-shaped diagonal segment has a length of 4 and follows these coordinates: (2,3) → (3,2), takes a 90-degree clockwise turn at (3,2), and continues as (2,1) → (1,0).

Example 3:

Input: grid = [[1,2,2,2,2],[2,2,2,2,0],[2,0,0,0,0],[0,0,2,2,2],[2,0,0,2,0]]

Output: 5

Explanation:



The longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,0) → (1,1) → (2,2) → (3,3) → (4,4).

Example 4:

Input: grid = [[1]]

Output: 1

Explanation:

The longest V-shaped diagonal segment has a length of 1 and follows these coordinates: (0,0).

 

Constraints:

n == grid.length
m == grid[i].length
1 <= n, m <= 500
grid[i][j] is either 0, 1 or 2.


Solution 1:

class Solution:
    def lenOfVDiagonal(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])  
        # 4 diagonal directions in clockwise order:
        # 0: ↘ (down-right), 1: ↙ (down-left), 2: ↖ (up-left), 3: ↗ (up-right)
        directions = [(1, 1), (1, -1), (-1, -1), (-1, 1)]

        # Dictionary for manual memoization: 
        # key = (row, col, direction, expected_val, turned_flag)
        # value = max length from this state
        dp = {}

        def solve(i: int, j: int, d: int, val: int, turned: bool) -> int:
            """
            DFS to find longest V-shaped diagonal path from (i, j) 
            moving in direction d, expecting `val` next, 
            and having used at most one clockwise turn.
            """

            # Create a key for this state
            key = (i, j, d, val, turned)

            # If we already computed this state, return the stored value
            if key in dp:
                return dp[key]

            # Move to next cell in the current direction
            r, c = i + directions[d][0], j + directions[d][1]

            # Stop if we go out of bounds
            if r < 0 or r >= n or c < 0 or c >= m:
                dp[key] = 0
                return 0

            # Stop if value mismatch
            if grid[r][c] != val:
                dp[key] = 0
                return 0

            # Compute the next expected value in the alternating sequence (2 ↔ 0)
            next_val = 0 if val == 2 else 2  

            # Option 1: Continue straight
            straight = 1 + solve(r, c, d, next_val, turned)

            # Option 2: Take one clockwise 90° turn (if not already used)
            turned_path = 0
            if not turned:
                turned_path = 1 + solve(r, c, (d + 1) % 4, next_val, True)

            # Store the best result in memo and return it
            dp[key] = max(straight, turned_path)
            return dp[key]

        result = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1:  # Start must be 1
                    for d in range(4):  # Try all 4 diagonal directions
                        result = max(result, 1 + solve(i, j, d, 2, False))

        return result