1717. Maximum Score From Removing Substrings
Solved
Medium
Topics
Companies
Hint
You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 

Constraints:

1 <= s.length <= 105
1 <= x, y <= 104
s consists of lowercase English letters.


Solution 1:

class Solution:
    def maximumGain(self, s: str, x: int, y: int) -> int:
        # Decide which substring removal gives more points and handle it first
        # We’ll call the higher-point substring high_sub, the other low_sub
        if x >= y:
            high_sub, low_sub = "ab", "ba"
            high_score, low_score = x, y
        else:
            high_sub, low_sub = "ba", "ab"
            high_score, low_score = y, x

        def remove_and_score(input_str: str, target_sub: str, points: int):
            """
            Walk through input_str using a stack to remove all occurrences of target_sub.
            Each time target_sub is formed at the top of the stack, pop it and add points.
            Returns the leftover string and the accumulated score.
            """
            stack = []
            subtotal = 0

            for ch in input_str:
                # If the top of the stack + current char equals target_sub, we remove it
                if stack and stack[-1] + ch == target_sub:
                    stack.pop()           # remove the matching character
                    subtotal += points    # add the reward
                else:
                    stack.append(ch)      # otherwise keep the character for future matches

            # Rebuild remaining string and return with score from this pass
            return "".join(stack), subtotal

        # 1) First pass: remove all high‐value substrings ("ab" or "ba" whichever is worth more)
        intermediate_str, primary_score = remove_and_score(s, high_sub, high_score)

        # 2) Second pass: remove all remaining lower‐value substrings from the leftover
        _, secondary_score = remove_and_score(intermediate_str, low_sub, low_score)

        # Total score is sum of both removal phases
        return primary_score + secondary_score