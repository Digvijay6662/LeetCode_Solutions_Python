2537. Count the Number of Good Subarrays
Solved
Medium
Topics
Companies
Hint
Given an integer array nums and an integer k, return the number of good subarrays of nums.

A subarray arr is good if there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1,1,1], k = 10
Output: 1
Explanation: The only good subarray is the array nums itself.
Example 2:

Input: nums = [3,1,4,3,2,2,4], k = 2
Output: 4
Explanation: There are 4 different good subarrays:
- [3,1,4,3,2,2] that has 2 pairs.
- [3,1,4,3,2,2,4] that has 3 pairs.
- [1,4,3,2,2,4] that has 2 pairs.
- [4,3,2,2,4] that has 2 pairs.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i], k <= 109


Solution 1:

class Solution:
    def countGood(self, nums: List[int], k: int) -> int:
        n = len(nums)
        l = 0
        pairs = 0
        count = defaultdict(int)
        result = 0
        
        # r pointer goes from 0 to n-1.
        for r in range(n):
            # When adding nums[r], increase pairs by the current frequency of nums[r]
            pairs += count[nums[r]]
            count[nums[r]] += 1
            
            # While current window [l, r] is good (pairs >= k), 
            # then every subarray from [l, r] to [l, n-1] is good.
            while pairs >= k and l <= r:
                # There are (n - r) subarrays starting at l with ends r, r+1, ... n-1.
                result += n - r
                
                # Now shrink the window from the left by removing nums[l].
                # Before removal, count[nums[l]] = f. Removing this will reduce the pair count by (f - 1).
                count[nums[l]] -= 1
                pairs -= count[nums[l]]  # because count[nums[l]] was f-1 after removal.
                
                l += 1
                
        return result