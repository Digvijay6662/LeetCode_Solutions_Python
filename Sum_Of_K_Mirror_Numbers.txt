2081. Sum of k-Mirror Numbers
Solved
Hard
Topics
premium lock icon
Companies
Hint
A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.

For example, 9 is a 2-mirror number. The representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward.
On the contrary, 4 is not a 2-mirror number. The representation of 4 in base-2 is 100, which does not read the same both forward and backward.
Given the base k and the number n, return the sum of the n smallest k-mirror numbers.

 

Example 1:

Input: k = 2, n = 5
Output: 25
Explanation:
The 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:
  base-10    base-2
    1          1
    3          11
    5          101
    7          111
    9          1001
Their sum = 1 + 3 + 5 + 7 + 9 = 25. 
Example 2:

Input: k = 3, n = 7
Output: 499
Explanation:
The 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:
  base-10    base-3
    1          1
    2          2
    4          11
    8          22
    121        11111
    151        12121
    212        21212
Their sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.
Example 3:

Input: k = 7, n = 17
Output: 20379000
Explanation: The 17 smallest 7-mirror numbers are:
1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596
 

Constraints:

2 <= k <= 9
1 <= n <= 30


Solution 1:

class Solution:
    def kMirror(self, k: int, n: int) -> int:

        # Helper function to check if a string is a palindrome.
        def checkPalindrome(s):
            return s == s[::-1]

        # Helper function to convert a number to its base-k string
        # representation and check if it's a palindrome.
        def checkBaseK(num):
            if num == 0: return True
            s = ""
            while num > 0:
                s += str(num % k)
                num //= k
            return checkPalindrome(s)
        
        result = 0
        length = 1 # Start by generating 1-digit palindromes

        while n > 0:
            # Calculate the length of the first half of the palindrome
            half_length = (length + 1) // 2
            
            # Define the range for the first half (e.g., for 3-digit numbers, range is 10-99)
            lower_limit = 10 ** (half_length - 1)
            upper_limit = 10 ** half_length - 1

            # Iterate through all possible first halves
            for i in range(lower_limit, upper_limit + 1):
                first_half_str = str(i)
                second_half_str = first_half_str[::-1]

                # Construct the full palindrome from the halves
                if length % 2 == 1:
                    # Odd length: e.g., 123 -> 12321 (remove first char of reversed half)
                    pal_str = first_half_str + second_half_str[1:]
                else:
                    # Even length: e.g., 123 -> 123321
                    pal_str = first_half_str + second_half_str
                
                pal_num = int(pal_str)

                # Check if this base-10 palindrome is also a base-k palindrome
                if checkBaseK(pal_num):
                    result += pal_num
                    n -= 1
                    # If we have found all n numbers, we can stop immediately.
                    if n == 0:
                        return result
            
            # Increment the length to check for longer palindromes
            # in the next iteration of the while loop.
            length += 1
            
        return result