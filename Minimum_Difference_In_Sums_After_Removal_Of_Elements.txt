2163. Minimum Difference in Sums After Removal of Elements
Solved
Hard
Topics
premium lock icon
Companies
Hint
You are given a 0-indexed integer array nums consisting of 3 * n elements.

You are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:

The first n elements belonging to the first part and their sum is sumfirst.
The next n elements belonging to the second part and their sum is sumsecond.
The difference in sums of the two parts is denoted as sumfirst - sumsecond.

For example, if sumfirst = 3 and sumsecond = 2, their difference is 1.
Similarly, if sumfirst = 2 and sumsecond = 3, their difference is -1.
Return the minimum difference possible between the sums of the two parts after the removal of n elements.

 

Example 1:

Input: nums = [3,1,2]
Output: -1
Explanation: Here, nums has 3 elements, so n = 1. 
Thus we have to remove 1 element from nums and divide the array into two equal parts.
- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.
- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.
- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.
The minimum difference between sums of the two parts is min(-1,1,2) = -1. 
Example 2:

Input: nums = [7,9,5,8,1,3]
Output: 1
Explanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.
If we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.
To obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.
It can be shown that it is not possible to obtain a difference smaller than 1.
 

Constraints:

nums.length == 3 * n
1 <= n <= 105
1 <= nums[i] <= 105


Solution 1:

class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        # total number of elements in nums is 3 * n
        N = len(nums)
        # compute n as one third of the array length
        n = N // 3

        # leftMinSum[i] will store the minimum possible sum of n elements
        # selected from nums[0..i]
        leftMinSum = [0] * N
        # use a max-heap (by pushing negatives) to keep track of the smallest n elements
        maxHeap = []
        curr_sum = 0  # current sum of elements in the heap

        # build leftMinSum for the first 2n elements
        for i in range(2 * n):
            # push negative of nums[i] so that the largest original value becomes the smallest negative
            heapq.heappush(maxHeap, -nums[i])
            curr_sum += nums[i]
            # if we exceed n elements, pop the largest original value
            if len(maxHeap) > n:
                val = -heapq.heappop(maxHeap)  # convert back to positive
                curr_sum -= val
            # record sum of the smallest n elements up to index i
            leftMinSum[i] = curr_sum

        # rightMaxSum[i] will store the maximum possible sum of n elements
        # selected from nums[i..N-1]
        rightMaxSum = [0] * N
        # use a min-heap to keep track of the largest n elements
        minHeap = []
        curr_sum = 0  # reset current sum for the right side

        # build rightMaxSum from the end of the array down to index n
        for i in range(N - 1, n - 1, -1):
            heapq.heappush(minHeap, nums[i])
            curr_sum += nums[i]
            # if we exceed n elements, pop the smallest value
            if len(minHeap) > n:
                val = heapq.heappop(minHeap)
                curr_sum -= val
            # record sum of the largest n elements from index i to end
            rightMaxSum[i] = curr_sum

        # initialize result to a very large number
        result = float('inf')
        # consider split points between indices [n-1, 2n-1]
        # left part uses leftMinSum[i], right part uses rightMaxSum[i+1]
        for i in range(n - 1, 2 * n):
            left = leftMinSum[i]
            right = rightMaxSum[i + 1]
            # update minimum difference
            result = min(result, left - right)

        return result


Solution 2:

class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        # total number of elements is 3 * n
        N = len(nums)
        # compute one-third of the array size
        n = N // 3

        # rightMaxSum[i] will hold the max sum of n elements from nums[i..N-1]
        rightMaxSum = [0] * N
        # min-heap to keep track of the largest n elements in the suffix
        minHeap = []
        curr_sum = 0  # running sum of elements in minHeap

        # build suffix sums from the end down to index n
        for i in range(N - 1, n - 1, -1):
            # add current element to heap
            heapq.heappush(minHeap, nums[i])
            curr_sum += nums[i]

            # if we have more than n elements, remove the smallest one
            if len(minHeap) > n:
                smallest = heapq.heappop(minHeap)
                curr_sum -= smallest

            # store the sum of the largest n elements from i to end
            rightMaxSum[i] = curr_sum

        # initialize result to +infinity
        result = float('inf')
        # max-heap (by pushing negatives) to track the smallest n elements in the prefix
        maxHeap = []
        leftMinSum = 0  # running sum of elements in maxHeap

        # build prefix sums and compute answer on the fly
        for i in range(2 * n):
            # push negative so that heap[0] is the largest original value
            heapq.heappush(maxHeap, -nums[i])
            leftMinSum += nums[i]

            # if more than n elements, remove the largest original value
            if len(maxHeap) > n:
                largest = -heapq.heappop(maxHeap)
                leftMinSum -= largest

            # once we have at least n prefix elements, update result
            if i >= n - 1:
                # split between i (prefix end) and i+1 (suffix start)
                diff = leftMinSum - rightMaxSum[i + 1]
                result = min(result, diff)

        return result