1368. Minimum Cost to Make at Least One Valid Path in a Grid
Solved
Hard
Topics
Companies
Hint
Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
Notice that there could be some signs on the cells of the grid that point outside the grid.

You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.

You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.

 

Example 1:


Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).
The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)
The total cost = 3.
Example 2:


Input: grid = [[1,1,3],[3,2,2],[1,1,4]]
Output: 0
Explanation: You can follow the path from (0, 0) to (2, 2).
Example 3:


Input: grid = [[1,2],[4,3]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
1 <= grid[i][j] <= 4


Solution 1:

class Solution:
    def minCost(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        direction = {1: (0, 1), 2: (0, -1), 3: (1, 0), 4: (-1, 0)}
        min_cost = [[float('inf')] * m for _ in range(n)]
        min_cost[0][0] = 0
        minHeap = [(0, 0, 0)]  # (current cost, row, col)

        while minHeap:
            curr_cost, i, j = heapq.heappop(minHeap)
            
            # If the cost for the current cell is already less, skip processing
            if curr_cost > min_cost[i][j]:
                continue
            
            # Explore all four directions
            for d, (di, dj) in direction.items():
                ni, nj = i + di, j + dj
                if 0 <= ni < n and 0 <= nj < m:
                    # Calculate the cost to move to (ni, nj)
                    new_cost = curr_cost + (1 if d != grid[i][j] else 0)
                    if min_cost[ni][nj] > new_cost:
                        min_cost[ni][nj] = new_cost
                        heapq.heappush(minHeap, (new_cost, ni, nj))

        # Return the minimum cost to reach the bottom-right corner
        return min_cost[n - 1][m - 1]


Solution 2:

class Solution:
    def minCost(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        direction = {1: (0, 1), 2: (0, -1), 3: (1, 0), 4: (-1, 0)}
        visited = [[False] * m for _ in range(n)]
        q = deque([(0, 0, 0)])  # (row, col, cost)

        while q:
            i, j, cost = q.popleft()
            if visited[i][j]:
                continue
            visited[i][j] = True

            # If we've reached the bottom-right corner, return the cost
            if i == n - 1 and j == m - 1:
                return cost

            # Explore all four directions
            for d in direction:
                ni, nj = i + direction[d][0], j + direction[d][1]
                if 0 <= ni < n and 0 <= nj < m and not visited[ni][nj]:
                    # If the direction matches the current cell's sign, no cost to move
                    if d == grid[i][j]:
                        q.appendleft((ni, nj, cost))  # Priority to zero-cost moves
                    else:
                        q.append((ni, nj, cost + 1))  # Add 1 to the cost for modification

        return -1  # This should not be reached in a valid grid