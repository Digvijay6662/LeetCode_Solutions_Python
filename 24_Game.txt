679. 24 Game
Solved
Hard
Topics
premium lock icon
Companies
You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.

You are restricted with the following rules:

The division operator '/' represents real division, not integer division.
For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.
For example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed.
You cannot concatenate numbers together
For example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid.
Return true if you can get such expression that evaluates to 24, and false otherwise.

 

Example 1:

Input: cards = [4,1,8,7]
Output: true
Explanation: (8-4) * (7-1) = 24
Example 2:

Input: cards = [1,2,1,2]
Output: false
 

Constraints:

cards.length == 4
1 <= cards[i] <= 9


Solution 1:

class Solution:
    def judgePoint24(self, cards: List[int]) -> bool:
        EPS = 1e-6  # Small tolerance for floating-point comparison

        def solve(nums):
            # Base case: if only one number left, check if it's (approximately) 24
            if len(nums) == 1:
                return abs(nums[0] - 24) < EPS

            n = len(nums)
            # Try all unique pairs (i, j) where i < j to avoid duplicate combinations
            for i in range(n):
                for j in range(i + 1, n):
                    a, b = nums[i], nums[j]

                    # Remaining numbers after removing a and b
                    next_nums = [nums[k] for k in range(n) if k != i and k != j]

                    # Set to store possible results of operations between a and b
                    candidates = set()
                    candidates.add(a + b)  # Addition
                    candidates.add(a - b)  # Subtraction (a - b)
                    candidates.add(b - a)  # Subtraction (b - a)
                    candidates.add(a * b)  # Multiplication
                    
                    # Division: only if denominator is not too close to zero
                    if abs(b) > EPS:
                        candidates.add(a / b)
                    if abs(a) > EPS:
                        candidates.add(b / a)

                    # Recursively try each candidate result with the remaining numbers
                    for val in candidates:
                        if solve(next_nums + [val]):
                            return True
            return False

        # Convert cards to floats for precise division and start recursion
        return solve([float(x) for x in cards])