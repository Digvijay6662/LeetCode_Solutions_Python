2434. Using a Robot to Print the Lexicographically Smallest String
Solved
Medium
Topics
premium lock icon
Companies
Hint
You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:

Remove the first character of a string s and give it to the robot. The robot will append this character to the string t.
Remove the last character of a string t and give it to the robot. The robot will write this character on paper.
Return the lexicographically smallest string that can be written on the paper.

 

Example 1:

Input: s = "zza"
Output: "azz"
Explanation: Let p denote the written string.
Initially p="", s="zza", t="".
Perform first operation three times p="", s="", t="zza".
Perform second operation three times p="azz", s="", t="".
Example 2:

Input: s = "bac"
Output: "abc"
Explanation: Let p denote the written string.
Perform first operation twice p="", s="c", t="ba". 
Perform second operation twice p="ab", s="c", t="". 
Perform first operation p="ab", s="", t="c". 
Perform second operation p="abc", s="", t="".
Example 3:

Input: s = "bdda"
Output: "addb"
Explanation: Let p denote the written string.
Initially p="", s="bdda", t="".
Perform first operation four times p="", s="", t="bdda".
Perform second operation four times p="addb", s="", t="".
 

Constraints:

1 <= s.length <= 105
s consists of only English lowercase letters.


Solution 1:

class Solution:
    def robotWithString(self, s: str) -> str:
        n = len(s)
        # Build suffix_min so that suffix_min[i] = min(s[i:])
        suffix_min = [''] * (n + 1)
        suffix_min[n] = '{'  # a character lexicographically bigger than 'z'
        for i in range(n-1, -1, -1):
            suffix_min[i] = min(s[i], suffix_min[i+1])

        stack = []   # represents string t (robot’s held string)
        result = []  # represents the paper output p

        for i, ch in enumerate(s):
            # 1) robot takes the first char of s (i.e. ch) and appends to t → push onto stack
            stack.append(ch)

            # 2) While the top of t is <= the smallest character still in s (i.e. suffix_min[i+1]),
            #    pop it from t and write it down on paper (append to result).
            while stack and stack[-1] <= suffix_min[i+1]:
                result.append(stack.pop())

        # 3) Finally, empty out any remaining characters in t onto the paper.
        while stack:
            result.append(stack.pop())

        return ''.join(result)