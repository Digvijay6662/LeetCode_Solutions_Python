2131. Longest Palindrome by Concatenating Two Letter Words
Solved
Medium
Topics
Companies
Hint
You are given an array of strings words. Each element of words consists of two lowercase English letters.

Create the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.

Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.

A palindrome is a string that reads the same forward and backward.

 

Example 1:

Input: words = ["lc","cl","gg"]
Output: 6
Explanation: One longest palindrome is "lc" + "gg" + "cl" = "lcggcl", of length 6.
Note that "clgglc" is another longest palindrome that can be created.
Example 2:

Input: words = ["ab","ty","yt","lc","cl","ab"]
Output: 8
Explanation: One longest palindrome is "ty" + "lc" + "cl" + "yt" = "tylcclyt", of length 8.
Note that "lcyttycl" is another longest palindrome that can be created.
Example 3:

Input: words = ["cc","ll","xx"]
Output: 2
Explanation: One longest palindrome is "cc", of length 2.
Note that "ll" is another longest palindrome that can be created, and so is "xx".
 

Constraints:

1 <= words.length <= 105
words[i].length == 2
words[i] consists of lowercase English letters.


Solution 1:

class Solution:
    def longestPalindrome(self, words: List[str]) -> int:
        # Create a dictionary to count the occurrence of each word
        count = defaultdict(int)
        for word in words:
            count[word] += 1

        result = 0      # This will accumulate the total length of the palindrome
        center = False  # Flag to indicate if we can place a palindromic word in the center

        # Iterate over each unique word in the dictionary
        for word in count:
            if count[word] == 0:
                continue
            r_word = word[::-1]  # Compute the reverse of the current word

            # Check if the reverse of the current word is in the dictionary
            if r_word in count:
                # Determine how many pairs can be formed between 'word' and 'r_word'
                min_freq = min(count[word], count[r_word])
                if r_word == word:
                    # The word is palindromic (like "aa", "gg") itself
                    # If there is an odd count, we can later use one occurrence as the center of the palindrome
                    if min_freq % 2 == 1:
                        center = True
                    # Add the contribution of the pairs to the result; each pair contributes 4 characters
                    result += (min_freq // 2) * 4
                elif min_freq > 0:
                    # For non-palindromic pairs (like "ab" and "ba"), each pair contributes 4 characters.
                    result += min_freq * 4
                    # After pairing, subtract the used counts from both words
                    count[word] -= min_freq
                    count[r_word] -= min_freq

        # If any palindromic word remains for the center (only one such word can be used),
        # add 2 additional characters to the result.
        if center:
            result += 2

        return result